import streamlit as st
from gradio_client import Client, file as gr_file
import tempfile
from pathlib import Path

st.set_page_config(page_title="Senorix AI ‚Äî Song Generation", layout="centered")

st.title("üéµ Senorix AI ‚Äî Song Generation")
st.markdown(
    "Une interface simple pour appeler le mod√®le de g√©n√©ration de chansons via le Gradio Space.\n\n"
    "Colle tes paroles (ou utilise le template), choisis des r√©glages, puis clique sur **G√©n√©rer**."
)

# --- Sidebar / settings ---
st.sidebar.header("Param√®tres API")
space_url = st.sidebar.text_input(
    "Gradio Space URL",
    value="https://tencent-songgeneration.hf.space/",
    help="URL du Space Gradio/HF. Par d√©faut celle fournie."
)
api_name = st.sidebar.text_input("Endpoint", value="/generate_song")

st.sidebar.markdown("---")
st.sidebar.header("Options de g√©n√©ration")
default_genre = st.sidebar.selectbox("Genre par d√©faut", ["Pop", "Rock", "Hip-Hop", "R&B", "Electronic", "Folk"])

# --- Main form ---
with st.form(key="gen_form"):
    st.subheader("Paroles (lyric)")
    lyric = st.text_area(
        "Paroles",
        value="""[intro-short]

[verse]
Â§úÊôöÁöÑË°óÁÅØÈó™ÁÉÅ
ÊàëÊº´Ê≠•Âú®ÁÜüÊÇâÁöÑËßíËêΩ
ÂõûÂøÜÂÉèÊΩÆÊ∞¥Ëà¨Ê∂åÊù•
‰Ω†ÁöÑÁ¨ëÂÆπÂ¶ÇÊ≠§Ê∏ÖÊô∞
Âú®ÂøÉÂ§¥Êó†Ê≥ïÊäπÂéª
ÈÇ£‰∫õÊõæÁªèÁöÑÁîúËúú
Â¶Ç‰ªäÂè™Ââ©ÊàëÁã¨Ëá™ÂõûÂøÜ

[verse]
ÊâãÊú∫Â±èÂπï‰∫ÆËµ∑
ÊòØ‰Ω†ÂèëÊù•ÁöÑÊ∂àÊÅØ
ÁÆÄÂçïÁöÑÂá†‰∏™Â≠ó
Âç¥ËÆ©ÊàëÊ≥™ÊµÅÊª°Èù¢
ÊõæÁªèÁöÑÊã•Êä±Ê∏©Êöñ
Â¶Ç‰ªäÂç¥ÂèòÂæóÈÅ•Ëøú
ÊàëÂ§öÊÉ≥ÂõûÂà∞‰ªéÂâç
ÈáçÊñ∞Êã•Êúâ‰Ω†ÁöÑÈô™‰º¥

[chorus]
ÂõûÂøÜÁöÑÊ∏©Â∫¶ËøòÂú®
‰Ω†Âç¥Â∑≤‰∏çÂú®
ÊàëÁöÑÂøÉË¢´Áà±Â°´Êª°
Âç¥ÂèàË¢´ÊÄùÂøµÂà∫Áóõ
Èü≥‰πêÁöÑËäÇÂ•èÂ•èÂìç
ÊàëÁöÑÂøÉÂç¥Âú®ÊµÅÊµ™
Ê≤°Êúâ‰Ω†ÁöÑÊó•Â≠ê
ÊàëËØ•Â¶Ç‰ΩïÁªßÁª≠ÂêëÂâç

[outro-short]""",
        height=260
    )

    description = st.text_input("Description (optionnelle)", value="")
    uploaded_audio = st.file_uploader(
        "Prompt audio (optionnel) ‚Äî mp3/wav",
        type=["mp3", "wav", "ogg"],
        help="Envoyer un court extrait audio si le mod√®le supporte 'prompt_audio'."
    )

    genre = st.selectbox("Genre", options=["Pop", "Rock", "Hip-Hop", "R&B", "Electronic", "Folk", "Other"], index=0)
    cfg_coef = st.number_input("cfg_coef", value=1.5, step=0.1, format="%.2f")
    temperature = st.number_input("temperature", value=0.9, step=0.05, format="%.2f")
    top_k = st.number_input("top_k", value=50, step=1, min_value=1)

    submit = st.form_submit_button("üéõÔ∏è G√©n√©rer la chanson")

# --- Predict / call API ---
if submit:
    if not lyric.strip():
        st.warning("Veuillez fournir des paroles (lyric).")
    else:
        client = Client(space_url)
        st.info("Envoi de la requ√™te au mod√®le...")
        with st.spinner("G√©n√©ration en cours‚Ä¶ cela peut prendre du temps"):
            try:
                # Pr√©parer prompt_audio si pr√©sent
                prompt_audio_arg = None
                if uploaded_audio is not None:
                    tmp = tempfile.NamedTemporaryFile(delete=False, suffix=Path(uploaded_audio.name).suffix)
                    tmp.write(uploaded_audio.getbuffer())
                    tmp.flush()
                    tmp.close()
                    prompt_audio_arg = gr_file(tmp.name)

                # Appel predict
                result = client.predict(
                    lyric=lyric,
                    description=description or None,
                    prompt_audio=prompt_audio_arg,
                    genre=genre,
                    cfg_coef=float(cfg_coef),
                    temperature=float(temperature),
                    top_k=int(top_k),
                    api_name=api_name
                )

                st.success("R√©ponse re√ßue du mod√®le.")
                st.subheader("R√©ponse brute")
                st.write(result)

                # ---- Extraction du fichier audio ----
                audio_found = False

                if isinstance(result, (list, tuple)) and len(result) > 0:
                    first_item = result[0]
                    if isinstance(first_item, str) and first_item.startswith("/tmp/gradio"):
                        try:
                            local_path = client.download(first_item)  # t√©l√©chargement du wav
                            st.audio(local_path)

                            with open(local_path, "rb") as f:
                                st.download_button(
                                    "‚¨áÔ∏è T√©l√©charger l'audio",
                                    data=f,
                                    file_name="generated_song.wav",
                                    mime="audio/wav"
                                )
                            audio_found = True
                        except Exception as e:
                            st.error(f"Impossible de t√©l√©charger le fichier audio : {e}")

                if not audio_found:
                    st.info("Aucun fichier audio exploitable d√©tect√© dans la r√©ponse.")

            except Exception as e:
                st.error("Erreur lors de l'appel au Space Gradio :")
                st.exception(e)
